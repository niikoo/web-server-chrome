import { HTTPRequest } from './request';
import { BaseHandler, WebApplication } from "./webapp";
export declare class WebSocketHandler extends BaseHandler {
    app: WebApplication;
    request: HTTPRequest;
    ws_connection: any;
    close_code: any;
    close_reason: any;
    stream: any;
    _on_close_called: boolean;
    select_subprotocols: (subprots) => {};
    get_compression_options: () => {};
    on_pong: (data) => {};
    on_close: () => {};
    constructor(app: WebApplication, request: HTTPRequest);
    get(): void;
    write_message(message: any, binary: any): void;
    ping(data: any): void;
    close(code: any, reason: any): void;
    set_nodelay(val: any): void;
    on_connection_close(): void;
    send_error(opts: any): void;
    check_origin(origin: any): boolean;
    compute_accept_value(key: any, cb: any): void;
    _websocket_mask(mask: any, data: any): ArrayBuffer;
}
export declare var WSPROT: {
    FIN: number;
    RSV1: number;
    RSV2: number;
    RSV3: number;
    OPCODE_MASK: number;
    MAGIC: string;
    RSV_MASK: any;
};
export declare class WebSocketProtocol {
    handler: WebSocketHandler;
    client_terminated: boolean;
    server_terminated: boolean;
    request: any;
    stream: any;
    mask_outgoing: any;
    _final_frame: boolean | number;
    _frame_opcode: any;
    _masked_frame: any;
    _frame_mask: any;
    _frame_length: any;
    _fragmented_message_buffer: any;
    _fragmented_message_opcode: any;
    _waiting: any;
    _compression_options: any;
    _decompressor: any;
    _compressor: any;
    _frame_compressed: any;
    _messages_bytes_in: number;
    _messages_bytes_out: number;
    _wire_bytes_in: number;
    _wire_bytes_out: number;
    _frame_opcode_is_control: any;
    opts: any;
    on_message: (msg) => {};
    constructor(handler: WebSocketHandler, opts: any);
    accept_connection(): void;
    _challenge_response(): Promise<{}>;
    _accept_connection(): void;
    _parse_extensions_header(headers: any): any[];
    _process_server_headers(): void;
    _get_compressor_options(side: any, agreed_params: any): void;
    _create_compressors(side: any, agreed_params: any): void;
    _write_frame(fin: any, opcode: any, data: any, flags?: any): void;
    write_message(message: any, binary: any): void;
    write_ping(data: any): void;
    _receive_frame(): void;
    _on_frame_start(data: any): void;
    _on_frame_length_16(data: any): void;
    _on_frame_length_64(data: any): void;
    _on_frame_length_n(data: any): void;
    _on_masking_key(data: any): void;
    _on_masked_frame_data(data: any): void;
    _on_frame_data(data: any): void;
    _handle_message(opcode: any, data: any): void;
    close(code?: any, reason?: any): void;
    _handle_websocket_headers(): boolean;
    on_connection_close(): void;
    _run_callback(callback?: any, ctx?: any, ...args: any[]): void;
    _abort(): void;
}
